// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
enum Gender {
  male
  female
  non_binary        // Updated to lowercase
  transgender       // Updated to lowercase
  other
  prefer_not_to_say
}
 
 

enum LicenseStatus {
  licensed
  pre_licensed
  none
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String // REMEMBER: Store HASHED passwords, not plaintext
  therapist Therapist?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Therapist {
  id                   String    @id @default(uuid())
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  slug                 String?   @unique
  published            Boolean   @default(false)

  // --- Basics from Zod ---
  name                 String?
  primaryCredential    String?
  primaryCredentialAlt String?
  gender               Gender?   // Uses updated Gender enum
  phone                String?
  workEmail            String?
  website              String?
  imageUrl             String?
  coverImageUrl        String?

  // --- Location from Zod ---
  primaryAddress       String?
  primaryCity          String?
  primaryState         String?
  primaryZip           String?
  additionalAddress    String?
  additionalCity       String?
  additionalState      String?
  additionalZip        String?
  telehealth           Boolean?
  inPerson             Boolean?
  locationDescription  String?   @db.Text

  // --- SEO (from your previous schema) ---
  seoZip1              String?
  seoZip2              String?
  seoZip3              String?
  nearbyCity1          String?
  nearbyCity2          String?
  nearbyCity3          String?

  // --- Finances from Zod ---
  feeIndividual        Int?      // MODIFIED: Changed from String? for proper price filtering
  feeCouples           Int?      // MODIFIED: Changed from String?
  slidingScale         Boolean?
  freeConsultation     Boolean?
  feeComment           String?   @db.Text
  paymentMethods       String[]  @default([])
  // insuranceAccepted    String[] @default([])  // MODIFIED: Changed from String? to support multiple & 'has' query

  // --- Qualifications from Zod ---
  licenseStatus          LicenseStatus?
  profession             String?
  licenseNumber          String?
  licenseState           String?
  licenseExpirationMonth Int?
  licenseExpirationYear  Int?
  educationSchool        String?
  educationDegree        String?
  educationYearGraduated Int?
  practiceStartYear      Int?

  // --- Personal Statement from Zod ---
  tagline              String?   @db.Text
  personalStatement1   String?   @db.Text
  personalStatement2   String?   @db.Text
  personalStatement3   String?   @db.Text

  // --- Specialties from Zod ---
  issues                 String[]  @default([])
  topIssues              String[]  @default([])
  specialtyDescription   String?   @db.Text
  mentalHealthInterests  String[]  @default([])
  sexualityInterests     String[]  @default([])
  ages                   String[]  @default([]) // Used by Age filter
  participants           String[]  @default([])
  communities            String[]  @default([]) // Used by Faith filter
  faithInterests         String[]  @default([])
  languages              String[]  @default([]) // Used by Language filter

  // --- Treatment Style from Zod ---
  treatmentStyle           String[]  @default([]) // Used by Type of Therapy filter
  treatmentStyleDescription String?   @db.Text

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String   @db.Text
  metaTitle       String?
  metaDescription String?  @db.Text
  published       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}